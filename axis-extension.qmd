---
title: "axis-extension"
format: html
editor: visual

params: 
  eval_models: true
    
execute:
  echo: false
  warning: true
  message: true
  include: false
---

```{r}
#| label: load-packages
library(tidyverse)
library(lme4)
library(lmerTest)
library(buildmer)
library(qwraps2)
library(emmeans)
library(broom.mixed)
library(effectsize)
library(papaja)
library(patchwork)
library(insight)
```

```{r}
#| label: lazyload-cache
if (!params$eval_models){
lazyload_cache_dir('axis-extension_cache/html')}
```

```{r}
#| label: wrangle
anon_data1 <- read_csv('data/anon_data1.csv',
                       col_types = cols(.default = "?", genderResp2.text = col_character()))
# correct the coercion of the genderResp2.text to logical

anon_data2 <- read_csv('data/anon_data2.csv')

# perform necessary data wrangling
wrangle <- function(anon_file, .y) {
  # .y captures the index of the file in the list supplied to iwalk

# extract literacy data
# calculate literacy score (sum of five responses)
literacy <- anon_file %>%
  filter(!is.na(q1_slider.response)) %>%
  rowwise() %>%
  mutate(literacy = sum(c(q1_slider.response, 
                          q2_slider.response, 
                          q3_slider.response, 
                          q4_slider.response, 
                          q5_slider.response))) %>%
  select(participant,
         literacy)

# define education categories 
edu_labels <- set_names(c('No formal qualications',
                          'Secondary education (e.g. GED/GCSE)',
                          'High school diploma/A-levels',
                          'Technical/community college',
                          'Undergraduate degree (BA/BSc/other)',
                          'Graduate degree (MA/MSc/MPhil/other)',
                          'Doctorate degree (PhD/other)',
                          'Don\'t know / not applicable'),
                        seq(8,1,-1))

# define gender categories
gender_labels <- set_names(c("Prefer not to say", 
                             "In another way:",
                             "Non-binary", 
                             "Man", 
                             "Woman"),
                           1:5)
# extract demographics
# link slider response numbers to gender categories 
# link slider response numbers to education categories
demographics <- anon_file %>%
  filter(!is.na(genderResp1.response)) %>%
  mutate(genderResp1.response = 
           recode(genderResp1.response, !!!gender_labels)) %>%
  mutate(edu_slider.response =
           recode(edu_slider.response, !!!edu_labels)) %>%
  select(participant,
         ageResp.text,
         genderResp1.response,
         edu_slider.response)

# extract duration data (in seconds)
durations <- anon_file %>%
  filter(!is.na(total_duration)) %>%
  select(participant, total_duration)
  
# select relevant columns
# select only experimental items
# add literacy and demographic data
# change data types where appropriate
# output this file with suffix 'tidy'
anon_file %>% 
  filter(item_type == "E") %>%
  select(matches(c("participant",
                   "item_no",
                   "item_type",
                   "cond",
                   "axis",
                   "denominator",
                   "slider.response",
                   "mag_slider.response",
                   "con_slider.response",
                   "seed_no"))) %>% 
    inner_join(literacy, by = "participant") %>%
    inner_join(demographics, by = "participant") %>%
    inner_join(durations, by = "participant") %>%
    mutate(total_duration = total_duration / 60) %>%
    mutate(across(matches(c("cond", "axis")), 
                  ~ case_match(.x,
                               "full" ~ "extend",
                               "trunc" ~ "default"))) %>%
    mutate(across(matches(c("axis", "denominator", "cond")), as_factor)) %>%
    mutate(across(c("participant", "item_no"), as.character)) %>%
    assign(paste0("e", .y),
           value = ., envir = .GlobalEnv)
}

iwalk(list(anon_data1, anon_data2), wrangle)


# set sum contrasts
contrasts(e2$axis) <- contr.sum(2)
contrasts(e2$denominator) <- contr.sum(2)
```

```{r}
#| label: anova-results-function
# this function takes two nested models, runs an anova, and the outputs the Likelihood Ratio Statistic, degrees of freedom, and p value to the global environment
anova_results <- function(test_model, full_model) {
  
  # first argument 
  test_model_name <- deparse(substitute(test_model))
  full_model_name <- deparse(substitute(full_model))

  if (class(test_model) == "buildmer") test_model <- test_model@model
  if (class(full_model) == "buildmer") full_model <- full_model@model
  
  anova_output <- anova(test_model, full_model)
  
  assign(paste0(test_model_name, ".Chi"),
         anova_output$Chisq[2],
         envir = .GlobalEnv)
  assign(paste0(test_model_name, ".Df"),
         anova_output$Df[2],
         envir = .GlobalEnv)
  assign(paste0(test_model_name, ".p"),
         anova_output$`Pr(>Chisq)`[2],
         envir = .GlobalEnv)
  
  es <- eta_squared(anova(full_model), partial = TRUE) 
  
  es %>% pull(Parameter) %>%
    map(function(x) assign(paste0(model_name, 
                                  ".eta.", 
                                  str_replace(x, ":", "_")),
                           es %>%
                             filter(Parameter == x) %>% 
                             pull(Eta2_partial),
                           envir = .GlobalEnv))
}
```

```{r}
#| label: summary-extract-function

# this function extracts test statistics and p values from model summaries
summary_extract <- function(model) {
  
  model_name <- deparse(substitute(model))
  
  if (class(model) == "buildmer") model <- model@model
  
  es <- eta_squared(anova(model), partial = TRUE) 

  model %>% 
    anova() %>%
    as_tibble(rownames = "term", 
              .name_repair = make.names) %>%
    rename("p" = "Pr..F.") %>%
    inner_join(es, by = join_by("term" == "Parameter")) %>%
    mutate(term = str_replace(term, ":", "_")) %>%
    group_split(term) %>%
    map(~ {
      vals <- as.list(.x)
      names(vals) <- paste0(model_name, 
                            "_", 
                            .x$term, 
                            "_", 
                            names(vals))
      list2env(vals, envir = globalenv())
    })
  
}
```

```{r}
#| label: get-contrasts-function

get_contrasts <- function(contrast_df, condition) {

  df_name <- deparse(substitute(contrast_df))

  contrast_df %>% 
    contrast("consec", 
             simple = "each", 
             combine = TRUE, 
             adjust = "sidak") %>%
    as_tibble() %>% 
    filter(!!sym(condition) != ".") %>%
    group_split(!!sym(condition)) %>%
    map(~ {
      vals <- as.list(.x)
      names(vals) <- paste0(df_name, 
                            "_",
                            pull(., {{condition}}),
                            "_", 
                            names(vals))
      list2env(vals, envir = globalenv())
    })
  
}
```

```{r}
#| label: random-str-function

# this function creates a table which displays the random effects structure (intercepts and slopes) for a given model
random_str <- function(model) {
  model <- model@model
  terms <- model %>% find_random %>% unlist() %>% unname()
  mylist <- model %>% formula %>% findbars() %>% as.character()
  slopes <- lapply(mylist, str_extract, "(?<=\\+ )(.*)(?= \\| )") %>% 
    unlist()
  tibble(terms, slopes)
}
```

```{r}
#| label: get-anomalies-function

# returns the proportion of datasets which needed to re-generated for the highest data point to exceed the highest gridline

get_anomalies <- function(dataset){
  dataset %>%
  pull(seed_no) %>% # extract column with seed numbers
  unique() %>% # get unique values
  na.omit() %>% # omit NAs
  sort() %>% # ascending order (since they were generated in order)
  diff() %>% # calculate difference between each pair of values
  # the while loop was entered on every trial including the first
  # the first seed value in both experiments is 2
  # this indicates that a new seed number was not selected for the first chart
  #c(1, .) %>% # therefore we prepend a 1 to indicate this
  `>`(1) %>% # count the number of cases where a new seed number was selected
  mean()*100 # calculate the proportion of TRUE cases as a %
}
```

```{r}
#| label: print-es-function
# for dealing with effect sizes less than .001
print_es <- function(x) {ifelse(x<.001, "< 0.001", paste("=", printnum(x)))}
```

average duration was `r printnum(e1 %>% pull(total_duration) %>% mean())` minutes.

Datasets for `r printnum(get_anomalies(e1), digits = 0)`% of items were recreated to ensure that the highest value exceeded the highest gridline when the default axis setting was used.

average duration was `r printnum(e2 %>% pull(total_duration) %>% mean())` minutes.

Datasets for `r printnum(get_anomalies(e2), digits = 0)`% of items were recreated to ensure that the highest value exceeded the highest gridline when the default axis setting was used.

## Experiment 1 - Analysis

### Magnitude Ratings

```{r}
#| label: fig-e1-mag
#| include: true
e1 %>%
  ggplot(aes(x = slider.response, y = cond)) +
  geom_jitter(width = 0,
              height = 0.2,
              alpha = 0.1) +
  scale_y_discrete(breaks = c("extend", "default"),
                   labels = c("Extended", "Default")) + 
  labs(title = 'Experiment 1',
      y = NULL,
       x = NULL) + 
  scale_x_continuous(labels = c('Very low\nmagnitude', 'Very high\nmagnitude'),
    breaks = c(1,2),
    minor_breaks = c()) + 
  theme_minimal(base_size = 16)
```

@fig-e1-mag shows the raw data.

```{r}
#| label: e1-mag
#| eval: !expr params$eval_models
#| cache: !expr params$eval_models

e1_mag <- buildmer(slider.response ~ cond +
                     (1 + cond | participant) + 
                     (1 + cond | item_no),
                   data = e1)
```

```{r}
summary_extract(e1_mag)
```

Participants awarded higher ratings to charts with default axes, compared to charts with extended axes: F(`r printnum(e1_mag_cond_NumDF)`, `r printnum(e1_mag_cond_DenDF)`) = `r printnum(e1_mag_cond_F.value)`, p `r printp(e1_mag_cond_p, add_equals = T)`, partial $\eta^2$ = `r printnum(e1_mag_cond_Eta2_partial)`.

```{r}
#| include: false
random_str(e1_mag)
```

This model employed a maximal random effects structure, capturing the baseline responses (intercepts) and differences between the two axis settings (slopes) separately for each individual participant and each individual item.

### Magnitude Ratings and Data Visualisation Literacy

```{r}
#| label: e1-lit
#| eval: !expr params$eval_models
#| cache: !expr params$eval_models

e1_mag_l <- lmer(add.terms(formula(e1_mag),
"literacy"),
              data = e1)
```

```{r}
summary_extract(e1_mag_l)
```

Accounting for differences in data visualisation literacy did not change the significant effect of axis upper bound F(`r printnum(e1_mag_l_cond_NumDF)`, `r printnum(e1_mag_l_cond_DenDF)`) = `r printnum(e1_mag_l_cond_F.value)`, p `r printp(e1_mag_l_cond_p, add_equals = T)`, partial $\eta^2$ = `r printnum(e1_mag_l_cond_Eta2_partial)`.

## Experiment 2 - Analysis

### Magnitude Ratings

```{r}
#| label: fig-e2-mag
#| include: true

denom_labs <- c("Denominator Present in Text", 
                 "Denominator Absent from Text")
names(denom_labs) <- c("pres", "abs")

e2 %>%
  ggplot(aes(x = mag_slider.response, y = axis)) +
  geom_jitter(width = 0,
              height = 0.2,
              alpha = 0.1) +
  scale_y_discrete(limits = c("extend", "default"),
                   labels = c("Extended", "Default")) + 
  labs(title = 'Experiment 2',
      y = NULL,
       x = NULL) + 
  scale_x_continuous(labels = c('Very low\nmagnitude', 'Very high\nmagnitude'),
    breaks = c(1,2),
    minor_breaks = c()) + 
  facet_wrap(vars(denominator), ncol = 1, labeller = labeller(denominator = denom_labs)) +
  theme_minimal(base_size = 16)
```

@fig-e2-mag shows the raw data.

```{r}
#| label: e2-mag
#| eval: !expr params$eval_models
#| cache: !expr params$eval_models

e2_mag <- buildmer(mag_slider.response ~ axis*denominator +
                     (1 + axis*denominator | participant) + 
                     (1 + axis*denominator | item_no),
                   data = e2)
```

```{r}
summary_extract(e2_mag)
```

Charts with default axes elicited higher ratings than chart with extended axes (F(`r printnum(e2_mag_axis_NumDF)`, `r printnum(e2_mag_axis_DenDF)`) = `r printnum(e2_mag_axis_F.value)`, p `r printp(e2_mag_axis_p, add_equals = T)`, partial $\eta^2$ = `r printnum(e2_mag_axis_Eta2_partial)`) and charts not accompanied by a denominator in text elicited higher ratings than those accompanied by a denominator (F(`r printnum(e2_mag_denominator_NumDF)`, `r printnum(e2_mag_denominator_DenDF)`) = `r printnum(e2_mag_denominator_F.value)`, p `r printp(e2_mag_denominator_p, add_equals = T)`, partial $\eta^2$ = `r printnum(e2_mag_denominator_Eta2_partial)`).

Crucially, there was also a significant interaction between axis upper bound and denominator presence: F(`r printnum(e2_mag_axis_denominator_NumDF)`, `r printnum(e2_mag_axis_denominator_DenDF)`) = `r printnum(e2_mag_axis_denominator_F.value)`, p `r printp(e2_mag_axis_denominator_p, add_equals = T)`, partial $\eta^2$ = `r printnum(e2_mag_axis_denominator_Eta2_partial)`.

```{r}
#| label: e2-mag-contrasts

e2_mag_emm <- emmeans(e2_mag@model, pairwise ~ axis * denominator, adjust = 'sidak') 
  
get_contrasts(e2_mag_emm, condition = "denominator")
```

Pairwise comparisons reveal that charts with extended and default axes were rated differently when the denominator was present, replicating the effect from E1 (z = `r printnum(e2_mag_emm_pres_z.ratio)`, p `r printp(e2_mag_emm_pres_p.value, add_equals = TRUE)`), and also when the denominator was absent (z = `r printnum(e2_mag_emm_abs_z.ratio)`, p `r printp(e2_mag_emm_abs_p.value)`). Therefore, the interaction indicates that the degree of difference in magnitude ratings was affected by whether the denominator was present or absent.

The presence of a denominator decreased magnitude ratings for default charts, as expected: F... However, it also decreased magnitude ratings for extended charts: .

```{r}
#| include: false
random_str(e2_mag)
```

This model employed by-participant and by-item random effects. For each participant, there were random intercepts, plus random slopes for axis settings and denominator presence. For each item, there were random intercepts, plus random slopes for denominator presence.

```{r}
#| label: fig-e2-mag-int
#| include: true
#| message: false

my_palette <- unname(palette.colors(palette = "Okabe-Ito")[2:3])

emmip(e2_mag@model, denominator ~ axis, CIs = T, 
      dotarg = list(shape = "circle", size = 2), 
      linearg = list(linetype = "solid", lwd = 1.5),
      CIarg = list(lwd = 3, alpha = 0.5)) +
  scale_color_manual(limits = c('abs', 'pres'), 
                   labels = c('Absent from text', 'Present in text'),
                   values = my_palette) +
  scale_x_discrete(limits = c('extend', 'default'), 
                       labels = c('Extended', 'Default')) +
  scale_y_continuous(limits = c(1,2), 
                     breaks = c(1,2), 
                     minor_breaks = seq(1,2,0.2),
                     labels = c('Very low\nmagnitude', 
                                'Very high\nmagnitude')) + 
  labs(x = "Axis Upper Bound",
       y = "Magnitude Rating",
       color = "Denominator in Text",
       title = "Experiment 2 - Magnitude Ratings",
       subtitle =  "Estimated Marginal Means") + 
  theme_minimal(base_size = 16)
```

@fig-e2-mag-int shows the interaction.

### Magnitude Ratings and Data Visualisation Literacy

```{r}
#| label: e2-lit
#| eval: !expr params$eval_models
#| cache: !expr params$eval_models

e2_mag_l <- lmer(add.terms(formula(e2_mag),
"literacy"),
              data = e2)
```

### Confidence Ratings

```{r}
#| label: fig-e2-con
#| include: true

denom_labs <- c("Denominator Present in Text", 
                 "Denominator Absent from Text")
names(denom_labs) <- c("pres", "abs")

e2 %>%
  ggplot(aes(x = con_slider.response, y = axis)) +
  geom_jitter(width = 0,
              height = 0.2,
              alpha = 0.1) +
  scale_y_discrete(breaks = c("extend", "default"),
                   labels = c("Extended", "Default")) + 
  labs(title = 'Experiment 2',
      y = NULL,
       x = NULL) + 
  scale_x_continuous(labels = c('Not very\nconfident', 'Very\nconfident'),
    breaks = c(1,2),
    minor_breaks = c()) + 
  facet_wrap(vars(denominator), ncol = 1, labeller = labeller(denominator = denom_labs)) +
  theme_minimal(base_size = 16)  
```

@fig-e2-con shows the raw data.

```{r}
#| label: e2-con
#| eval: !expr params$eval_models
#| cache: !expr params$eval_models

e2_con <- buildmer(con_slider.response ~ axis*denominator +
                     (1 + axis*denominator | participant) + 
                     (1 + axis*denominator | item_no),
                   data = e2)
```

```{r}
#| label: e2-con-anova

e2_con_summ <- anova(e2_con) %>% as_tibble(rownames = "FixEf", .name_repair = make.names) %>%
  rename("Pr" = "Pr..F.")
```

{{< include test1.md >}}

```{r}
#| label: e2-con-contrasts

e2_con_emm <- emmeans(e2_con@model, pairwise ~ axis * denominator, adjust = 'sidak') 
  
get_contrasts(e2_con_emm, condition = "denominator")
```

```{r}
#| label: fig-e2-con-int
#| include: true
#| message: false
#| fig-cap: with 95% confidence intervals

my_palette <- unname(palette.colors(palette = "Okabe-Ito")[2:3])

emmip(e2_con@model, denominator ~ axis, 
      CIs = T, 
      dotarg = list(shape = "circle", size = 2), 
      linearg = list(linetype = "solid", lwd = 1.5),
      CIarg = list(lwd = 3, alpha = 0.5)) +
  scale_color_manual(limits = c('abs', 'pres'), 
                   labels = c('Absent from text', 'Present in text'),
                   values = my_palette,
                   guide = guide_legend(reverse=T)) +
  scale_x_discrete(limits = c('extend', 'default'), 
                       labels = c('Extended', 'Default')) +
  scale_y_continuous(limits = c(1,2), 
                     breaks = c(1,2), 
                     minor_breaks = seq(1,2,0.2),
                     labels = c('Not very\nconfident', 
                                'Very\nconfident')) + 
  labs(x = "Axis Upper Bound",
       y = "Magnitude Rating",
       color = "Denominator in Text",
       title = "Experiment 2 - Confidence Ratings",
       subtitle =  "Estimated Marginal Means") + 
  theme_minimal(base_size = 16)
```

@fig-e2-con-int shows the interaction.

### Confidence Ratings and Data Visualisation Literacy

```{r}
#| label: e2-con-lit
#| eval: !expr params$eval_models
#| cache: !expr params$eval_models

e2_con_l <- lmer(add.terms(formula(e2_con),
"literacy"),
              data = e2)
```
